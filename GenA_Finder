#!/usr/bin/perl
# Author Gina Varela, Laboratorio de Genomica Microbiana, CIAD.
#Version 1.0
# Dependencies: prodigal, blastp, samtools, bioperl

use strict;
use warnings;
use Getopt::Std;

#Options and flags--------------------------------------------------------------------------------------------

my %options=();
getopts("hq:d:v", \%options);

my $HELP = ( 
"USAGE
   script [-h] [-q FILENAME] [-d PATH TO DATABASE] \n
-----------------------------------------------------------
This script uses assembled fasta sequences as input file.
If you want to use a personal database, you must declare the path to the database.
The script will ask for the desired database if not declared.\n
\n");
my $Version = ( 
"This version is 1.0 \n
\n");
print "$HELP"; exit 0 if defined $options{h};
print "$Version" if defined $options{v};
my $file = ("$options{q}") if defined $options{q};
my $db = ("$options{d}") if defined $options{d};

#Selection of files-----------------------------------------------------------------------------------------
print "\n";
print "\n";
print "This script needs a fasta file with the contigs of an assembled genome.\n";
print "The script will annotate it, and compare it with the desired database.\n";
print "\n";
my @fastafiles = ();
if ($file) {
	print "\n";
	print "These are the files the script will work with:\n";
	print "\n";
	print $file,"\n";
	push @fastafiles, $file;
	print "\n";
}
else {
	print "Make sure these are the fasta files you want to process.\n";
	print "\n";
	print "--------------------------------------\n";
		foreach my $file ( glob ("*.fasta") ) {	
			print $file,"\n";
			push @fastafiles, $file;
}
	print "--------------------------------------\n";
	print "\n";
	print "Are these the correct files? (y/n)\n";
	my $response = <STDIN>;
	  	if($response =~  /^[Y]?$/i) {
			print "\n";
			print "\n";
			print "Choose your database:\n";
} 
		elsif($response =~ /^[N]?$/i) {
			print "\n";
			print "Check your fasta files for errors.\n";
			exit 0
}
}
#Selection of Database-----------------------------------------------------------------------------------
my @databasechoice = ();
if ($db) {
print "This is the database the script will be working with:\n";
print $db,"\n";
print "\n";
push @databasechoice, $db;
} 
else {
sub menu 
 {
        for (;;) {
            print "--------------------\n";
            print "$_[0]\n";
            print "--------------------\n";
            for (my $i = 0; $i < scalar(@{ $_[1]}); $i++) {
                print $i + 1, "\.\t ${ $_[1] }[$i]\n";
            }
            print "\n?: ";
            my $i = <STDIN>; chomp $i;
            if ($i && $i =~ m/[0-9]+/ && $i <= scalar(@{ $_[1]})) {
                return ${ $_[1] }[$i - 1];
            } else {
                print "\nInvalid input.\n\n";
            }
        }
    }

	my @databases = ("Housekeeping Genes according to Gil","Core Genome of the Vibrionaceae Family","Housekeeping genes of the Vibrionaceae Family","MLSA scheme");
    	my $db = menu('Database Options', \@databases);

push @databasechoice, $db;
print "\n";
}
#Annotation-------------------------------------------------------------------------------------------------
foreach my $files (@fastafiles) {
	my @cmd = "prodigal -a $files.faa -d $files.fna -i $files -q > output.txt";
	system(@cmd);
	print "\n";
	print "working in file:  \n", $files;
	print "\n";
	my $fa = substr($files,0,-6);
		rename ("$files.faa", "$fa.faa") || die ("Error in renaming");
		rename ("$files.fna", "$fa.fna") || die ("Error in renaming");
	
print "Database: \n";
print "	",@databasechoice,"\n";
print "\n";
print "The script will annotate the genomes.\n";
print "Do not close the terminal window.\n";
	foreach my $files (@fastafiles) {
		print "working with ", $files, "\n";
}
print "\n";
print "The annotation is done.\n";
#Comparison with the Database of choice --------------------------------------------------------------------
print "Don't close the terminal\n";
print "\n";
my @proteinquery = ( glob ("*.faa") );
foreach my $db (@databasechoice) {
if ($db eq "MLSA scheme") { 
	print "Comparing to the MLSA scheme for the Vibrionaceae family database.\n";
	foreach my $query (@proteinquery) {
		print "comparing ",$query," to the database.\n";
		my $qa = substr($query,0,-4);
		my @cmd = "blastp -db ~/GenA/MLSA/MLSA -query $query -out MLSA$query.tab -evalue 1e-5 -outfmt 6 -num_threads 5";
		system(@cmd);
		rename ("MLSA$query.tab", "$qa.tab") || die ("Error in renaming");
}
}
elsif ($db eq "Housekeeping Genes according to Gil") { 
	print "Comparing to the Housekeenping Genes Database.\n";
	foreach my $query (@proteinquery) {
		print "comparing ",$query," to the database.\n";		
		my $qa = substr($query,0,-4);
		my @cmd = "blastp -db ~/GenA/HG/HG -query $query -out HG$query.tab -evalue 1e-5 -outfmt 6 -num_threads 5";		
		system(@cmd);
		rename ("HG$query.tab", "$qa.tab") || die ("Error in renaming");
}
}
elsif ($db eq "Core Genome of the Vibrionaceae Family") {
	print "Comparing to the Core Genome of the Vibrionaceae family database.\n";
	foreach my $query (@proteinquery) {
		print "comparing ",$query," to the database.\n";		
		my $qa = substr($query,0,-4);
		my @cmd = "blastp -db ~/GenA/CoreGenes/CoreGenes -query $query -out CG$query.tab -evalue 1e-5 -outfmt 6 -num_threads 5";
		system(@cmd);
		rename ("CG$query.tab", "$qa.tab") || die ("Error in renaming");
}
}
elsif ($db eq "Housekeeping genes of the Vibrionaceae Family" ) { 
	print "Comparing to the Housekeeping genes of the Vibrionaceae family database.\n";
	
}
else {
	print "Comparing to personal database.\n";
	foreach my $query (@proteinquery) {
		print "comparing ",$query," to the database.\n";		
		my $qa = substr($query,0,-4);
		my @cmd = "blastp -db ~/GenA/HGV/HGV -query $query -out HGV$query.tab -evalue 1e-5 -outfmt 6 -num_threads 5";
		system(@cmd);
		rename ("HGV$query.tab", "$qa.tab") || die ("Error in renaming");
}
}
}
#Getting the best query of the bunch ---------------------------------------------------------------------------
print "looking for the best matches of the query\n";
my @tabquery = ( glob ("*.fna") );
foreach my $qa (@tabquery) {
	my $qac = substr ($qa,0,-4);
	my @sorteocmd = "awk '{print \$1, \$2, \$3}' $qac.tab | sort -k 3 -n -r -o sorted$qac";
	system(@sorteocmd);
	rename ("sorted$qac", "$qac.tab") || die ("Error in renaming");
	my @eleccioncmd = "sort -k 2,2 -u -o sorted$qac $qac.tab";
	system(@eleccioncmd);
	rename ("sorted$qac", "$qac.tab") || die ("Error in renaming");
	my @contigcmd = "awk '{print \$1}' $qac.tab > contigs_$qac.txt | awk '{print \$1, \$2}' $qac.tab > names_$qac.tab"; 
	system(@contigcmd);
}
#Looking for the Nucleotide Sequences-----------------------------------------------------------------
print "Looking for the nucleotides in the fna file\n";
foreach my $file ( glob ("*.fna") ) {	
 	my $fa = substr($file,0,-4);
	my $filename = ("contigs_$fa.txt");
	open (my $fh, $filename)
	or die "Can't open file '$filename";
	while (my $row = <$fh>) {
		chomp $row;
		my @cmd = "samtools faidx $file $row > $row.fa";
		system(@cmd);
	my @processed = "touch sequences_$fa.txt | cat *.fa >> sequences_$fa.txt";
	system(@processed);
	
#Changing the Names in the Processed file-------------------------------------------------------------------
use Bio::SeqIO;
	
	my $seqname = "names_$fa.tab";
	open (my $processedfile, '>', "sequences_$fa.fasta");	
	open (my $sh, $seqname) or die "Can't open file '$seqname";
	my %annot = map { /(\S+)\s+(.+)/; $1 => $2 } <$sh>;
	close $sh;
	my $processedseq = "sequences_$fa.txt";
	my $in = Bio::SeqIO->new( -file => $processedseq , -format => 'Fasta' );
	while ( my $fa = $in->next_seq() ) {
    	my $seqID = $annot{ $fa->id } // $fa->id;
    	print $processedfile ">","$seqID\n" . $fa->seq . "\n";
}
	close $processedfile;	
	my @uniq = "awk '/^>/{f=!d[\$1];d[\$1]=1}f' sequences_$fa.fasta > Processed_$fa.fasta";
	system (@uniq); 
}

#Outputs and final answers----------------------------------------------------------------------------------
	my @removecmd = "rm *.fa *.fai sequences_$fa.txt sequences_$fa.fasta contigs_$fa.txt names_$fa.tab";
	system (@removecmd);
}
print "\n";
print "The script has compared the genomes to the desired database.\n";
print "\n";
foreach my $file ( glob ("*.fna") ) {
my $fa = substr($file,0,-4);
print "The output of ", $fa,".fasta can be found in Processed_",$fa,".fasta.\n";
print "\n";
}}
