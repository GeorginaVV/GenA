#!/usr/bin/perl
#GenA_Finder version 1.2
# Author Gina Varela, Laboratorio de Genomica Microbiana, CIAD.
# Dependencies: prodigal, blastp, samtools, vsearch (optional)

use strict;
use warnings;
use Getopt::Std;

#Options stuff-------------------------------------------------------------------------------------------

my %options=();
getopts("hq:vd:", \%options);

my $HELP = ( 
"USAGE
   script [-h] [-q FILENAME] [-v USE VSEARCH] [-d PATH TO DATABASE] \n
-----------------------------------------------------------
This script uses assembled fasta sequences as input file.
If you want to use a personal database, you must declare the path to the database.
The script will ask for the desired database if not declared.\n
The Script will use blastp for default, if -v option is not declared.\n
\n");
print "$HELP" if defined $options{h};
exit 0 if defined $options{h};
my $search = ();
	$search = ("vsearch") if defined $options{v};
	$search = ("blastp" ) if not defined $options{v};
my $file = ("$options{q}") if defined $options{q};
my @tag = ();

#Selection of files--------------------------------------------------------------------------------------
print "\n";
print "This script needs a fasta file with the contigs of an assembled genome.\n";
print "The script will annotate it, and compare it with the desired database.\n";
print "\n";
my @fastafiles = ();
if ($file) {
	print "\n";
	print "These are the files the script will work with:\n";
	print "\n";
	print $file,"\n";
	push @fastafiles, $file;
	print "\n";
}
else {
	print "Make sure these are the fasta files you want to process.\n";
	print "\n";
	print "--------------------------------------\n";
		foreach my $file ( glob ("*.fasta") ) {	
			print $file,"\n";
			push @fastafiles, $file;
}
	print "--------------------------------------\n";
	print "\n";
	print "Are these the correct files? (y/n)\n";
	my $response = <STDIN>;
	  	if($response =~  /^[Y]?$/i) {
			print "\n";
			print "\n";
} 
		elsif($response =~ /^[N]?$/i) {
			print "\n";
			print "Check your fasta files for errors.\n";
			exit 0
}}
#Selection of Database-----------------------------------------------------------------------------------
my @pathtodb = ();
my $pdb = ("$options{d}") if defined $options{d};
if ($pdb) {
	print "This is the path of the database the script will be working with:\n";
	print $pdb,"\n";
	print "\n";
	push @pathtodb, $pdb;
} 
else {
			print "Choose your database:\n";
	sub menu {
		for (;;) {
			print "--------------------\n";
			print "$_[0]\n";
			print "--------------------\n";
			for (my $i = 0; $i < scalar(@{ $_[1]}); $i++) {
				print $i + 1, "\.\t ${ $_[1] }[$i]\n";
			}
			print "\n?: ";
			my $i = <STDIN>; chomp $i;
			if ($i && $i =~ m/[0-9]+/ && $i <= scalar(@{ $_[1]})) {
				return ${ $_[1] }[$i - 1];
			}
			else {
				print "\nInvalid input.\n\n";
			}
		}
	}
	my @databases = ("Housekeeping genes according to Gil","Core Genome of the Vibrionaceae Family","Housekeeping genes of the Vibrionaceae Family","MLSA scheme");
    	my $db = menu('Database Options', \@databases);
print "\n";
	if ($db eq "MLSA scheme"){
		push @tag, "MLSA"; 
		if ($search eq "vsearch"){
			print "The database: ", $db," has been chosen\n";
			push @pathtodb, "~/GenA/MLSA/MLSA_nucleotides";
		}
		else{
			print "The database: ", $db," has been chosen\n";
			push @pathtodb, "~/GenA/MLSA/MLSA";
			
		}
	}
	elsif ($db eq "Housekeeping genes according to Gil"){
		push @tag, "HG"; 
		if ($search eq "vsearch"){
			print "The database: ", $db," has been chosen\n";
			push @pathtodb, "~/GenA/HG/HG_nucleotides";
		}
		else{
			print "The database: ", $db," has been chosen\n";
			push @pathtodb, "~/GenA/HG/HG";
		}
	}
	elsif ($db eq "Core Genome of the Vibrionaceae Family"){
		push @tag, "CGV"; 
		if ($search eq "vsearch"){
			print "The database: ", $db," has been chosen\n";
			push @pathtodb, "~/GenA/CoreGenes/CG_nucleotides";
		}
		else{
			print "The database: ", $db," has been chosen\n";
			push @pathtodb, "~/GenA/CoreGenes/CoreGenes";
		}
	}
	elsif ($db eq "Housekeeping genes of the Vibrionaceae Family"){
		push @tag, "HGV"; 
		if ($search eq "vsearch"){
			print "The database: ", $db," has been chosen\n";
			push @pathtodb, "~/GenA/HGV/HGV_nucleotides";
		}
		else{
			print "The database: ", $db," has been chosen\n";
			push @pathtodb, "~/GenA/HGV/HGV";
		}
	}
}
	
#Searching ORFs with prodigal-------------------------------------------------------------------------------------------------
foreach my $files (@fastafiles) {
	print "Prodigal is searching with:\n";
	print "		", $files,"\n";	
	my @cmd = "prodigal -a $files.faa -d $files.fna -i $files -q > output.txt";
	system(@cmd);
	print "\n";
	my $fa = substr($files,0,-6);
		rename ("$files.faa", "$fa.faa") || die ("Error in renaming");
		rename ("$files.fna", "$fa.fna") || die ("Error in renaming");
}
print "\n";
print "Prodigal is done.\n";
print "Don't close the terminal\n";
print "\n";
#Comparison with the Database of choice -------------------------------------------------
my @proteinquery = (glob ("*.faa"));
foreach my $query (@proteinquery) {
	print "comparing ",$query," to the database.\n";
	my $qa = substr($query,0,-4);
	foreach my $path (@pathtodb){
		my @vsearch =( "vsearch --usearch_global $qa.fna -blast6out $qa.tab -db $path --id 0.2 --threads 4" );
		my @blastp = ( "blastp -db $path -query $query -out $qa.tab -evalue 1e-5 -outfmt 6 -num_threads 5" );
			system(@vsearch) if defined $options{v};
			system(@blastp) if not defined $options{v};
}}

#Get the best query of the bunch ---------------------------------------------------------------------------
print "looking for the best matches of the query\n";
my @tabquery = ( glob ("*.fna") );
foreach my $qa (@tabquery) {
	my $qac = substr ($qa,0,-4);
	my @sorteocmd = "awk '{print \$1, \$2, \$3}' $qac.tab | sort -k 3 -n -r -o sorted$qac";
	system(@sorteocmd);
	rename ("sorted$qac", "$qac.tab") || die ("Error in renaming");
	my @eleccioncmd = "sort -k 2,2 -u -o sorted$qac $qac.tab";
	system(@eleccioncmd);
	rename ("sorted$qac", "$qac.tab") || die ("Error in renaming");
	my @contigcmd = "awk '{print \$1}' $qac.tab > contigs_$qac.tab | awk '{print \$1, \$2}' $qac.tab > names_$qac.tab"; 
	system(@contigcmd);
}
#Let's go look for the Nucleotide Sequences-----------------------------------------------------------------
print "Looking for the nucleotides in the fna file\n";
foreach my $file ( glob ("*.fna") ) {	
 	my $fa = substr($file,0,-4);
	my $filename = ("contigs_$fa.tab");
	open (my $fh, $filename)
	or die "Can't open file '$filename";
	while (my $row = <$fh>) {
		chomp $row;
		my @cmd = "samtools faidx $file $row > $row.fa";
		system(@cmd);
	my @processed = "touch sequences_$fa.txt | cat *.fa >> sequences_$fa.txt";
	system(@processed);
	
#Changing the Names in the Processed file-------------------------------------------------------------------
use Bio::SeqIO;
	
	my $seqname = "names_$fa.tab";
	open (my $processedfile, '>', "sequences_$fa.fasta");	
	open (my $sh, $seqname) or die "Can't open file '$seqname";
	my %annot = map { /(\S+)\s+(.+)/; $1 => $2 } <$sh>;
	close $sh;
	my $processedseq = "sequences_$fa.txt";
	my $in = Bio::SeqIO->new( -file => $processedseq , -format => 'Fasta' );
	while ( my $fa = $in->next_seq() ) {
    	my $seqID = $annot{ $fa->id } // $fa->id;
    	print $processedfile ">","$seqID\n" . $fa->seq . "\n";
}
	close $processedfile;	
	my @uniq = "awk '/^>/{f=!d[\$1];d[\$1]=1}f' sequences_$fa.fasta > Processed_$fa.fasta";
	system (@uniq); 
}

#Outputs and final answers----------------------------------------------------------------------------------
	my @removecmd = "rm *.fa *.fai *.txt sequences_$fa.fasta contigs_$fa.tab names_$fa.tab";
	system (@removecmd);
}
print "\n";
print "The script has compared the genomes to the desired database.\n";
print "\n";
foreach my $file ( glob ("*.fna") ) {
my $fa = substr($file,0,-4);
	foreach my $tag (@tag) {
		rename ("Processed_$fa.fasta", "$tag$fa.fasta");
print "The output of ", $fa,".fasta can be found in ",$tag,$fa,".fasta.\n";
print "\n";
print "The identity score is in ", $fa,".tab.\n";
print "\n";
}}
